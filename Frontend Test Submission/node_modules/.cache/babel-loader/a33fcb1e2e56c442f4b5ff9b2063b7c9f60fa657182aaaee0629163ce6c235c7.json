{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Log = Log;\nconst axios_1 = __importDefault(require(\"axios\"));\nconst DEFAULT_LOG_API = \"http://20.244.56.144/evaluation-service/logs\";\nfunction getEnv(name) {\n  try {\n    // Only works in Node. In the browser this will throw or be undefined.\n    // eslint-disable-next-line no-undef\n    return typeof process !== \"undefined\" && process.env && process.env[name] || undefined;\n  } catch {\n    return undefined;\n  }\n}\nconst LOG_API = getEnv(\"LOG_API\") || DEFAULT_LOG_API;\nconst LOG_API_KEY = getEnv(\"LOG_API_KEY\");\nasync function Log(stack, level, pkg, message) {\n  const payload = {\n    stack,\n    level,\n    package: pkg,\n    message\n  };\n  try {\n    // If no API key is configured and we're targeting the evaluation service,\n    // quietly skip remote logging to avoid 401s during local dev.\n    const isEvaluationService = typeof LOG_API === \"string\" && LOG_API.includes(\"evaluation-service\");\n    if (!LOG_API_KEY && isEvaluationService) {\n      if (typeof console !== \"undefined\") {\n        console.debug?.(`[LOG SKIPPED] ${JSON.stringify(payload)}`);\n      }\n      return;\n    }\n    const headers = {\n      \"Content-Type\": \"application/json\"\n    };\n    if (LOG_API_KEY) {\n      headers[\"Authorization\"] = `Bearer ${LOG_API_KEY}`;\n    }\n    const res = await axios_1.default.post(LOG_API, payload, {\n      headers\n    });\n    if (res.status === 200) {\n      console.info(`[LOGGED] ${JSON.stringify(payload)} → ${res.data.logID}`);\n    }\n  } catch (err) {\n    console.error(`[LOG ERROR] Failed to log: ${message}`, err.message);\n  }\n}","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","Log","axios_1","require","DEFAULT_LOG_API","getEnv","name","process","env","undefined","LOG_API","LOG_API_KEY","stack","level","pkg","message","payload","package","isEvaluationService","includes","console","debug","JSON","stringify","headers","res","default","post","status","info","data","logID","err","error"],"sources":["/Users/mac/Documents/Computer Science/Web dev/22BTRCN193/Logging Middleware/dist/loggingMiddleware.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Log = Log;\nconst axios_1 = __importDefault(require(\"axios\"));\nconst DEFAULT_LOG_API = \"http://20.244.56.144/evaluation-service/logs\";\nfunction getEnv(name) {\n    try {\n        // Only works in Node. In the browser this will throw or be undefined.\n        // eslint-disable-next-line no-undef\n        return (typeof process !== \"undefined\" && process.env && process.env[name]) || undefined;\n    }\n    catch {\n        return undefined;\n    }\n}\nconst LOG_API = getEnv(\"LOG_API\") || DEFAULT_LOG_API;\nconst LOG_API_KEY = getEnv(\"LOG_API_KEY\");\nasync function Log(stack, level, pkg, message) {\n    const payload = { stack, level, package: pkg, message };\n    try {\n        // If no API key is configured and we're targeting the evaluation service,\n        // quietly skip remote logging to avoid 401s during local dev.\n        const isEvaluationService = typeof LOG_API === \"string\" && LOG_API.includes(\"evaluation-service\");\n        if (!LOG_API_KEY && isEvaluationService) {\n            if (typeof console !== \"undefined\") {\n                console.debug?.(`[LOG SKIPPED] ${JSON.stringify(payload)}`);\n            }\n            return;\n        }\n        const headers = { \"Content-Type\": \"application/json\" };\n        if (LOG_API_KEY) {\n            headers[\"Authorization\"] = `Bearer ${LOG_API_KEY}`;\n        }\n        const res = await axios_1.default.post(LOG_API, payload, { headers });\n        if (res.status === 200) {\n            console.info(`[LOGGED] ${JSON.stringify(payload)} → ${res.data.logID}`);\n        }\n    }\n    catch (err) {\n        console.error(`[LOG ERROR] Failed to log: ${message}`, err.message);\n    }\n}\n"],"mappings":"AAAA,YAAY;;AACZ,IAAIA,eAAe,GAAI,IAAI,IAAI,IAAI,CAACA,eAAe,IAAK,UAAUC,GAAG,EAAE;EACnE,OAAQA,GAAG,IAAIA,GAAG,CAACC,UAAU,GAAID,GAAG,GAAG;IAAE,SAAS,EAAEA;EAAI,CAAC;AAC7D,CAAC;AACDE,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,GAAG,GAAGA,GAAG;AACjB,MAAMC,OAAO,GAAGR,eAAe,CAACS,OAAO,CAAC,OAAO,CAAC,CAAC;AACjD,MAAMC,eAAe,GAAG,8CAA8C;AACtE,SAASC,MAAMA,CAACC,IAAI,EAAE;EAClB,IAAI;IACA;IACA;IACA,OAAQ,OAAOC,OAAO,KAAK,WAAW,IAAIA,OAAO,CAACC,GAAG,IAAID,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC,IAAKG,SAAS;EAC5F,CAAC,CACD,MAAM;IACF,OAAOA,SAAS;EACpB;AACJ;AACA,MAAMC,OAAO,GAAGL,MAAM,CAAC,SAAS,CAAC,IAAID,eAAe;AACpD,MAAMO,WAAW,GAAGN,MAAM,CAAC,aAAa,CAAC;AACzC,eAAeJ,GAAGA,CAACW,KAAK,EAAEC,KAAK,EAAEC,GAAG,EAAEC,OAAO,EAAE;EAC3C,MAAMC,OAAO,GAAG;IAAEJ,KAAK;IAAEC,KAAK;IAAEI,OAAO,EAAEH,GAAG;IAAEC;EAAQ,CAAC;EACvD,IAAI;IACA;IACA;IACA,MAAMG,mBAAmB,GAAG,OAAOR,OAAO,KAAK,QAAQ,IAAIA,OAAO,CAACS,QAAQ,CAAC,oBAAoB,CAAC;IACjG,IAAI,CAACR,WAAW,IAAIO,mBAAmB,EAAE;MACrC,IAAI,OAAOE,OAAO,KAAK,WAAW,EAAE;QAChCA,OAAO,CAACC,KAAK,GAAG,iBAAiBC,IAAI,CAACC,SAAS,CAACP,OAAO,CAAC,EAAE,CAAC;MAC/D;MACA;IACJ;IACA,MAAMQ,OAAO,GAAG;MAAE,cAAc,EAAE;IAAmB,CAAC;IACtD,IAAIb,WAAW,EAAE;MACba,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUb,WAAW,EAAE;IACtD;IACA,MAAMc,GAAG,GAAG,MAAMvB,OAAO,CAACwB,OAAO,CAACC,IAAI,CAACjB,OAAO,EAAEM,OAAO,EAAE;MAAEQ;IAAQ,CAAC,CAAC;IACrE,IAAIC,GAAG,CAACG,MAAM,KAAK,GAAG,EAAE;MACpBR,OAAO,CAACS,IAAI,CAAC,YAAYP,IAAI,CAACC,SAAS,CAACP,OAAO,CAAC,MAAMS,GAAG,CAACK,IAAI,CAACC,KAAK,EAAE,CAAC;IAC3E;EACJ,CAAC,CACD,OAAOC,GAAG,EAAE;IACRZ,OAAO,CAACa,KAAK,CAAC,8BAA8BlB,OAAO,EAAE,EAAEiB,GAAG,CAACjB,OAAO,CAAC;EACvE;AACJ","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}